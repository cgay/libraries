==========
Need to Do
==========

Most of the things marked with TODO in a comment are need-to-do items.

-----

Better template handling. Right now, there is little debugging information for
templates. If the template itself is badly formed, you get a direct error from
the parser without the usual file name and position. That is easy enough to
clean up. But if the document resulting from the template has errors or
warnings, you get source locations that say nothing more than "automatically
generated". This can be improved to refer to an actual file if the --autogen-dir
switch is used.

-----

Generating DITA and HTML from the internal data structure. This includes
generating indices.

I'm thinking the user won't be able to extensively customize the generated HTML
document. Probably just CSS styles, maybe a logo or common header or footer. We
should offer a couple of different layout styles. For anything more extensive,
the user should generate DITA output and use XSLT or a DITA processing system.

-----

Simplify fully-qualified names of methods. The names of arguments do not need to
be fully qualified; they can just be the local name in the specified namespace.
For example, the FQN "dylan:dylan:as-uppercase(dylan:dylan:<string>)" can become
"dylan:dylan:as-uppercase(<string>)".

Replace the "Fully Qualified Name" directive with a "Namespace" directive (or
words to that effect), since all I need that directive to do is disambiguate the
title and provide a namespace for non-existant APIs; with this change, we can
assume that the fully-qualified-name slot is always correct and only present for
an existent API. Take the title part of an API topic directive to be the base
part of an FQN instead of a full title, thereby solving the "Library: Io
Library" awkwardness.

The elements of the names-in-namespace slot can be the local name in the keyed
namespace instead of a fully-qualified name; we can get the fully qualified name
by simply concatenating the key and the element. The ":::" ID notation can refer
to any matching namespace-local name, rather than the local name in the
"current" namespace which is not always a defined concept. The "::" ID notation
should be able to refer to aliases of the API in addition to the canonical
fully-qualified name.

-------

Note API names that do not correspond to topics, such as names imported from
external libraries. If the author attempts to link to such a name, give the link
the API style and turn it into normal text.

Once that is done, we can probably do something smarter with imported and
renamed external APIs.


==========
Want to Do
==========

Note direct and indirect libraries required, so developer can make sure those
are available. More important for GD than OD.

------

Tables. The table syntax requires that the code figures out table columns before
tokenizing words -- actual character boundaries matter.

------

Figure out how to turn "--" into an em-dash automatically. This won't interfere
with ASCII lines because an ASCII line needs *three* consecutive characters.

------

Replace topic templates with code-generated markup representation. This will be
faster and provide opportunities to preserve source locations, insert syntax
information, and be absolutely sure of parm-lists.

------

Implement comment block that follow the element to be documented, Ã  la Doxygen's
"//<" comments.


============
Bonus Points
============ 

Create some sort of standalone installation that does not need to live in the
SVN libraries directory. Some arrangement has to be made for the contents of the
Doctower's defaults directory, though. Typical locations would be:

- "${PREFIX}/share/doctower" on Unix
- "C:\Program Files\Doctower" on Windows
- "/Applications/Doctower.app/Contents/Resources" on Mac OS

------

Figure out how to do something like the abbreviated syntax shown at
http://naturaldocs.org/documenting/walkthrough.html#AbbreviatedSyntax.

--------

Interconnect separate documentation packages, e.g. the Koala package can connect
to the main Dylan package so that references to "<integer>" in Koala link to the
Dylan documentation.

This requires some sort of repository. The user should be able to set this up
wherever he likes; it should be a strictly optional feature. The HTML or DITA
output (or maybe the internal representation saved to a file) will need to have
hooks recognizable and replacable by the system. To keep the main application
from being overburdened with purposes and options, a separate tool should manage
the user's document collections and interconnections.
