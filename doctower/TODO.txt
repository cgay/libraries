==========
Need to Do
==========

Most of the things marked with TODO in a comment are need-to-do items.

-----

Better template handling. Right now, there is little debugging information for
templates. If the template itself is badly formed, you get a direct error from
the parser without the usual file name and position. That is easy enough to
clean up. But if the document resulting from the template has errors or
warnings, you get source locations that say nothing more than "automatically
generated". A better solution would be to save all template results into a
temporary directory, contingent on a command line switch, and to report errors
accordingly.

-----

API recognition. If you type "use the <integer> class," the code should figure
out that you want to link to the class. This relies on cues within the name, of
course. If you type "use the stream-location function," I doubt the code can
guess that you want to link to the function -- though maybe if an adjacent word
is "function" and the word is the name of a documented function, that might
work.

-----

Generating DITA and HTML from the internal data structure. This includes
generating indices.

I'm thinking the user won't be able to extensively customize the generated HTML
document. Probably just CSS styles, maybe a logo or common header or footer. We
should offer a couple of different layout styles. For anything more extensive,
the user should generate DITA output and use XSLT or a DITA processing system.


==========
Want to Do
==========

Note direct and indirect libraries required, so developer can make sure those
are available. More important for GD than OD.

------

Tables. The table syntax requires that the code figures out table columns before
tokenizing words -- actual character boundaries matter.

------

Figure out how to turn "--" into an em-dash automatically. This won't interfere
with ASCII lines because an ASCII line needs *three* consecutive characters.

------

Rewrite <ordered-tree>. I recently learned of something called a "zipper." This
is a data structure that acts much like a tree, but is based around a pointer to
a current node. This is what I was trying to do when I wrote the <ordered-tree>
class, but I expect the zipper will be faster and more efficient. It would be
good to replace the current <ordered-tree> implementation with a zipper-based
one.


============
Bonus Points
============ 

Create some sort of standalone installation that does not need to live in the
SVN libraries directory. Some arrangement has to be made for the contents of the
Doctower's defaults directory, though. Typical locations would be:

- "${PREFIX}/share/doctower" on Unix
- "C:\Program Files\Doctower" on Windows
- "/Applications/Doctower.app/Contents/Resources" on Mac OS

------

Figure out how to do something like the abbreviated syntax shown at
http://naturaldocs.org/documenting/walkthrough.html#AbbreviatedSyntax.

--------

Interconnect separate documentation packages, e.g. the Koala package can connect
to the main Dylan package so that references to "<integer>" in Koala link to the
Dylan documentation.

This requires some sort of repository. The user should be able to set this up
wherever he likes; it should be a strictly optional feature. The HTML or DITA
output (or maybe the internal representation saved to a file) will need to have
hooks recognizable and replacable by the system. To keep the main application
from being overburdened with purposes and options, a separate tool should manage
the user's document collections and interconnections.
