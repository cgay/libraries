----------
ScheMD5 1.0: An MD5 implementation in Scheme by Taylor Campbell.
----------

Copyright

Copyright (C) 2004 Taylor Campbell.
All rights reserved.

You may do as you like with this code: quote it, copy it, distribute
it -- in source, binary, or ternary forms --, statically link it to
GPL'd _and_ Java programs, et cetera; with the only provision that
you always give credit to its original author, Taylor Campbell, you
do not remove this copyright notice, and you do not hold the author,
Taylor Campbell, liable for _any_ damages that may be caused as a
result, direct or indirect, of using this software, not even if it
should cause outbreaks of nasal demons.

----------

This implementation is purely in Scheme, with no calls to C libraries
or anything.  It is written for clarity and partially for speed.  The
interface is based on scsh's, and is compatible with scsh's, except
for the current lack of MD5-DIGEST-FOR-PORT.  I thank Jens Axel
Soegaard for having written an initial [a slow, following the
specification literally] MD5 implementation in Scheme for me to base
this implementation somewhat upon.

This code is written to be as portable as possible.  There are very few
non-R5RS dependencies.  Although currently I have written module code
for it for only Scheme48, it should be trivial to port to the module
systems of other Scheme systems.

----------

Source layout:

  README  - you're reading this
  _darcs/ - stuff for the Darcs revision system
  doc/    - directory containing documentation, currently empty
  scheme/ - directory containing source code
      md5.scm            - main implementation
      bignum-words.scm   - implementation of words with bignums (see
                           the notes on words below)
      words.scm          - implementation of words with 16-bit fixnum
                           pairs (see the notes on words below)
      byte-strings.scm   - implements homogenous sequences of eight-bit
                           integers, as strings
      util.scm           - various utilities
      <impl>_<stuff>.scm - stuff regarding module data for <impl>

----------

Words

The implementation uses 'words' for 32-bit integers internally.  In
many Schemes, this will overflow into bignums, so there are two files
that implement words in this: bignum-words.scm uses ordinary numeric
support, and is likely to be somewhat slow, due to all the conversion
between fixnum and bignum; words.scm uses pairs of 16-bit integers,
which are likely to be fixnums, and so it is likely to be considerably
faster (there's a pretty big variation in what implementations found
what versions faster; for Larceny, words.scm was faster by a factor of
eight, whereas in Scheme48, bignum-words.scm was considerably faster.)

----------

Pronunciation

'ScheMD5' is pronounced as if it were 'Scheme D 5.'

----------
