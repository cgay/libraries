renumbering of subnets:
 => automatically change ips of hosts
 => also dns records

blackhole ip-ranges
 => requested by abuse phone

*user management/session:
 *put obj-tables in user session objects

*command abstraction for redo/undo, recent changes

security:
 -prevent cross-site scripting (escape <> in all input data)
 -everyone is able to delete everything (he only has to give the
  correct obj-id and use remove-object as action, so only put those
  objects in his obj-table which he needs access to...

*interface to get the next /XX subnet (or the next subnet with at least Y ips)
 *javascript chosing of network when adding subnet, dhcp-start, -end, -router

*default values for fields
 *when adding new ones (dhcp-start/end/...)

*string and cname lists/mx user interface

*links for gen-dhcp-config/gen-dns-config

*reverse-zones automatically generated

*caching of zones... don't increase serial if nothing changed...

with-xml:collect only works for elements, not for lists of elements

the following doesn't work (reference to undefined binding "collect" (but
collect is defined unhygienic in with-xml macro, do-clause, any ideas?
bug in functional-developer?)
 define macro add-form-helper
   { add-form-helper(?type:name) end }
     => { define method add-form (type == ?#"type")
            with-xml()
              form (action => "/edit", \method => "post")
              {
                div (class => "edit")
                {
                  do(for(slot in ?type.slot-descriptors)
                       let name = slot.slot-getter.debug-name;
                       collect(with-xml()
                                 text(name)
                               end);
                       collect(with-xml()
                                 input(type => "text",
                                       name => name)
                               end);
                       collect(with-xml() br end);
                     end;
                  input(type => "submit",
                        name => "add-button",
                        value => "Add")
                }
              }
            end;
          end; }
 end;
